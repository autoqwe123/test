#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from service import LineService
from service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   getContacts( ids)')
    print('  GetContactsV2Response getContactsV2( ids)')
    print('  Contact getContact(string id)')
    print('  Profile getProfile(SyncReason syncReason)')
    print('  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)')
    print('  GetChatsResponse getChats(GetChatsRequest request)')
    print('  CreateChatResponse createChat(CreateChatRequest request)')
    print('  UpdateChatResponse updateChat(UpdateChatRequest request)')
    print('  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)')
    print('  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)')
    print('  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)')
    print('  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)')
    print('  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)')
    print('  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)')
    print('  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)')
    print('  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)')
    print('  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)')
    print('  void unsendMessage(i32 seq, string messageId)')
    print('  Message sendMessage(i32 seq, Message message)')
    print('   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)')
    print('   fetchOperations(i64 localRev, i32 count)')
    print('   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)')
    print('   getAllContactIds(SyncReason syncReason)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = LineService.Client(protocol)
transport.open()

if cmd == 'getContacts':
    if len(args) != 1:
        print('getContacts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContacts(eval(args[0]),))

elif cmd == 'getContactsV2':
    if len(args) != 1:
        print('getContactsV2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContactsV2(eval(args[0]),))

elif cmd == 'getContact':
    if len(args) != 1:
        print('getContact requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContact(args[0],))

elif cmd == 'getProfile':
    if len(args) != 1:
        print('getProfile requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProfile(eval(args[0]),))

elif cmd == 'getAllChatMids':
    if len(args) != 2:
        print('getAllChatMids requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllChatMids(eval(args[0]), eval(args[1]),))

elif cmd == 'getChats':
    if len(args) != 1:
        print('getChats requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChats(eval(args[0]),))

elif cmd == 'createChat':
    if len(args) != 1:
        print('createChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.createChat(eval(args[0]),))

elif cmd == 'updateChat':
    if len(args) != 1:
        print('updateChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateChat(eval(args[0]),))

elif cmd == 'reissueChatTicket':
    if len(args) != 1:
        print('reissueChatTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.reissueChatTicket(eval(args[0]),))

elif cmd == 'acceptChatInvitation':
    if len(args) != 1:
        print('acceptChatInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.acceptChatInvitation(eval(args[0]),))

elif cmd == 'inviteIntoChat':
    if len(args) != 1:
        print('inviteIntoChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.inviteIntoChat(eval(args[0]),))

elif cmd == 'deleteSelfFromChat':
    if len(args) != 1:
        print('deleteSelfFromChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteSelfFromChat(eval(args[0]),))

elif cmd == 'deleteOtherFromChat':
    if len(args) != 1:
        print('deleteOtherFromChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteOtherFromChat(eval(args[0]),))

elif cmd == 'acceptChatInvitationByTicket':
    if len(args) != 1:
        print('acceptChatInvitationByTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.acceptChatInvitationByTicket(eval(args[0]),))

elif cmd == 'cancelChatInvitation':
    if len(args) != 1:
        print('cancelChatInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancelChatInvitation(eval(args[0]),))

elif cmd == 'rejectChatInvitation':
    if len(args) != 1:
        print('rejectChatInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.rejectChatInvitation(eval(args[0]),))

elif cmd == 'findChatByTicket':
    if len(args) != 1:
        print('findChatByTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.findChatByTicket(eval(args[0]),))

elif cmd == 'unsendMessage':
    if len(args) != 2:
        print('unsendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.unsendMessage(eval(args[0]), args[1],))

elif cmd == 'sendMessage':
    if len(args) != 2:
        print('sendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessage(eval(args[0]), eval(args[1]),))

elif cmd == 'fetchOps':
    if len(args) != 4:
        print('fetchOps requires 4 args')
        sys.exit(1)
    pp.pprint(client.fetchOps(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'fetchOperations':
    if len(args) != 2:
        print('fetchOperations requires 2 args')
        sys.exit(1)
    pp.pprint(client.fetchOperations(eval(args[0]), eval(args[1]),))

elif cmd == 'findAndAddContactsByMid':
    if len(args) != 4:
        print('findAndAddContactsByMid requires 4 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByMid(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'getAllContactIds':
    if len(args) != 1:
        print('getAllContactIds requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllContactIds(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
